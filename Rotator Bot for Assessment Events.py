import logging
import random
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ASK_ROOMS, ASK_PARTICIPANTS = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


def generate_schedule(participant_count, rooms):
    participants = list(range(1, participant_count + 1))
    num_rooms = len(rooms)

    if participant_count < num_rooms * 2:
        raise ValueError("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!")

    schedule = []

    for _ in range(3):  # 3 —Ç—É—Ä–∞
        random.shuffle(participants)
        room_assignments = {}

        for i, room in enumerate(rooms):
            start = i * (participant_count // num_rooms)
            end = (i + 1) * (participant_count // num_rooms)
            room_participants = participants[start:end]

            if i == num_rooms - 1:
                room_participants += participants[end:]

            room_assignments[room] = room_participants

        schedule.append(room_assignments)

    return schedule


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç –∫–æ–º–∞–Ω–¥–∞ brainz üíö! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 101, 205, 310):")
    return ASK_ROOMS


async def get_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rooms = [r.strip() for r in update.message.text.split(',')]
    context.user_data['rooms'] = rooms
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
    return ASK_PARTICIPANTS


async def get_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rooms = context.user_data['rooms']
        participant_count = int(update.message.text)

        schedule = generate_schedule(participant_count, rooms)

        response = []
        for round_num, assignments in enumerate(schedule, 1):
            response.append(f"üèÅ *–¢—É—Ä {round_num}*\\:")
            for room, people in assignments.items():
                people_str = ', '.join(map(str, people))
                response.append(f"*–ê—É–¥–∏—Ç–æ—Ä–∏—è {room}*\\: {people_str}")
            response.append("")

        await update.message.reply_text(
            text='\n'.join(response),
            parse_mode='MarkdownV2'
        )

    except Exception as e:
        error_message = str(e).replace('!', '\!').replace('.', '\.').replace('-', '\-')
        logging.error(f"–û—à–∏–±–∫–∞: {error_message}")
        await update.message.reply_text(
            text=f"*–û—à–∏–±–∫–∞\\:* {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\!",
            parse_mode='MarkdownV2'
        )

    await update.message.reply_text(
        text="üîÅ –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start\n"
             "‚ùó –ï—Å–ª–∏ —á—Ç–æ\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ \- –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
        parse_mode='MarkdownV2'
    )
    return ConversationHandler.END


def main():
    app = ApplicationBuilder().token("7562272916:AAF_A_RZYDAbwkq4y8ldAvwZ1fDdtPYAo1k").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_ROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rooms)],
            ASK_PARTICIPANTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_participants)],
        },
        fallbacks=[CommandHandler('start', start)]
    )

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == '__main__':
    main()
